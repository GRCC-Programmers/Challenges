These are my notes on the Knights Tour and Sudoku problem. The first step to solving a problem is to identify the problem and the second 
is to identify the steps involved. The problem is basically, I am trying to solve a 9x9 Sudoku board and 9x9 Knight's Tour. 
A "Knight's Tour" is a type of problem where the knight must traverse a board of n^2 size, touch every square, and never retouch another 
square. There are three possibilities, the tour can end on the square it started, the tour can end on a square where it didn't start, 
and no solution. Even when one sort of solution exists, the other may not. It is important to note though, that someone analyzed this 
problem enough to create a piecewise function determining the outcome of an attempted tour based on n.[1]

There are parts of the problem I can essentially ignore, including solving either board since programs and algorithms already exist. 
The most popular ones based on what I have found are an implementation of the Dancing Links algorithm created by Don Knuth, and the 
Warnsdorff Algorithm, which seeks to choose Knight's Tours moves based on which one will have the least subsequent moves to satisfy a 
valid answer. However, according to another academic paper[2] Warnsdorff's Algorithm runs in linear time. You can think of this as being 
a(n), where n is the amount of checks required to solve the problem and a is the constant variable. Computer scientists would typically 
prefer log(n) but that is not always possible. Even in cases where it is possible computer scientists have not always found the algorithm
that satisfies this runtime. However, if you're familiar with log graphs you can probably already tell it would scale better as n grows.
The algorithm for each move performs up to 8 checks for each possible move in each scenario. For smaller boards this is fine but will 
quickly become a problem. As a result, I need to find a solution that does not require such a massive board.

Therefore, a possible solution is to break down the board into several "smaller" boards that are connected or glued together. However, 
with this approach things get complicated very quickly. You must keep track of every knight's move and ensure each move would still 
satisfy the requirement. Furthermore, the rules asked for the output of 9x9 boards, so it must also look right when output. My solution 
involved simple math around a complicated topic.

Let n = number of squares
a1 = Number of indices of array 1
a2 = Number of indices of array 2

n = 9^2
n = 81

81 = (3x20) + (3x7)
81 = (3x10) + (3x10) + (3x7)

It is important that this math adds up correctly because it means I can let a1 = (3x20) or 60, and a2 = (3x7) or 21 with no loss of 
squares because in this case each index would represent an individual square. While Warnsdorff's Algorithm runs in linear time, many 
operations involved in "gluing" together any solutions will run at a constant or slightly quicker linear rate. However, I also must be 
careful because it is easy for this problem to get an exponential runtime, which scales very poorly. Which is why instead of physically 
gluing them together in memory it is probably more efficient to work through them as though they are a single array. 

However, once I solve the Knight's Tour, assuming I have already solved the Sudoku board the only task would be to compare coordinates 
against one another. If I are careful here though I can keep the runtime down low enough that a laptop such as mine can solve the 
problem. 

Lastly, the issue of outputting a 9x9 board comes up because I am using 3xn boards. I believe that it is possible to daisy chain 3x3 
boards like how Sudoku is solved. Thereby giving the impression of a board that does not actually exist. 
This actually makes the problem far more approachable than it may initially seem. 

Sources:
[1] http://gaebler.us/share/Knight_tour.html
[2] http://math.oregonstate.edu/~math_reu/proceedings/REU_Proceedings/Proceedings2004/2004Ganzfried.pdf
